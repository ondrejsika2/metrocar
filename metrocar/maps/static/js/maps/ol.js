// Generated by CoffeeScript 1.3.1
(function() {

  requirejs.config({
    paths: {
      OpenLayers: 'http://openlayers.org/api/OpenLayers'
    },
    shim: {
      OpenLayers: {
        exports: 'OpenLayers'
      }
    }
  });

  define(['jquery', 'OpenLayers'], function($, OpenLayers) {
    var Bounds, Control, Feature, Geometry, Layer, Map, Popup, Projection, Style, StyleMap, WSG84, styleMap;
    Bounds = OpenLayers.Bounds, Control = OpenLayers.Control, Feature = OpenLayers.Feature, Geometry = OpenLayers.Geometry, Layer = OpenLayers.Layer, Map = OpenLayers.Map, Popup = OpenLayers.Popup, Projection = OpenLayers.Projection, Style = OpenLayers.Style, StyleMap = OpenLayers.StyleMap;
    WSG84 = new Projection("EPSG:4326");
    styleMap = new StyleMap({
      "default": new Style({
        strokeColor: "#ff9933",
        strokeWidth: 5,
        graphicZIndex: 1
      }),
      select: new Style({
        fillColor: "#66ccff",
        strokeColor: "#3399ff",
        graphicZIndex: 2
      })
    });
    return function(container) {
      var API, Point, map, mapProjection, markerLayer, markerPopup, markerSelect, osmLayer, routeLayer;
      console.log('initializing OL map in', container);
      map = new Map();
      map.addLayer(osmLayer = new Layer.OSM());
      map.zoomToMaxExtent();
      map.render(container);
      window.themap = map;
      mapProjection = map.getProjectionObject();
      Point = function(_arg) {
        var lat, lon, point;
        lon = _arg[0], lat = _arg[1];
        point = new Geometry.Point(lon, lat);
        point.transform(WSG84, mapProjection);
        return point;
      };
      markerPopup = null;
      map.addLayer(routeLayer = new Layer.Vector("Route", {
        styleMap: styleMap,
        rendererOptions: {
          zIndexing: true
        }
      }));
      map.addLayer(markerLayer = new Layer.Vector("Markers", {
        rendererOptions: {
          zIndexing: true
        }
      }));
      map.addControl(markerSelect = new Control.SelectFeature(markerLayer, {
        hover: true
      }));
      markerSelect.events.register('featurehighlighted', map, function(_arg) {
        var feature;
        feature = _arg.feature;
        console.log('markerSelect, featurehighlighted', feature);
        markerPopup = new Popup.FramedCloud("markerPopup", feature.geometry.getBounds().getCenterLonLat(), null, feature.attributes.content, null, true, function() {
          return this.destroy();
        });
        feature.popup = markerPopup;
        markerPopup.feature = feature;
        return map.addPopup(markerPopup, true);
      });
      return API = {
        onMoved: function(callback) {
          return map.events.register('moveend', map, function() {
            return callback(API.getBounds());
          });
        },
        getBounds: function() {
          var bounds;
          bounds = map.getExtent();
          bounds.transform(mapProjection, WSG84);
          return bounds;
        },
        setBounds: function(_arg) {
          var bottom, bounds, left, right, top;
          left = _arg.left, bottom = _arg.bottom, right = _arg.right, top = _arg.top;
          bounds = new Bounds(left, bottom, right, top);
          bounds.transform(WSG84, mapProjection);
          return map.zoomToExtent(bounds);
        },
        drawRoute: function(route) {
          var line, points, routeFeature;
          points = route.map(Point);
          line = new Geometry.MultiLineString(points.slice(0, -1).map(function(point, i) {
            return new Geometry.LineString([point, points[i + 1]]);
          }));
          routeFeature = new Feature.Vector(line);
          return routeLayer.addFeatures([routeFeature]);
        },
        drawMarker: function(_arg) {
          var content, location, marker, point;
          location = _arg.location, content = _arg.content;
          point = Point(location);
          marker = new Feature.Vector(point, {
            content: content
          });
          markerLayer.addFeatures([marker]);
          return markerSelect.activate();
        },
        drawMarkers: function(markers) {
          var m, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = markers.length; _i < _len; _i++) {
            m = markers[_i];
            _results.push(this.drawMarker(m));
          }
          return _results;
        },
        clear: function() {
          if (markerPopup) {
            map.removePopup(markerPopup);
          }
          routeLayer.removeAllFeatures();
          return markerLayer.removeAllFeatures();
        }
      };
    };
  });

}).call(this);
