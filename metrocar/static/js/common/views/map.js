// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['backbone', 'maps/utils'], function(Backbone, _arg) {
    var Map, boundsToPolygon, enlargeBounds, polygonToBounds;
    boundsToPolygon = _arg.boundsToPolygon, polygonToBounds = _arg.polygonToBounds;
    enlargeBounds = function(_arg1) {
      var bottom, left, right, top;
      left = _arg1.left, right = _arg1.right, top = _arg1.top, bottom = _arg1.bottom;
      return {
        left: left - 0.01,
        right: right + 0.01,
        top: top + 0.01,
        bottom: bottom - 0.01
      };
    };
    return Map = (function(_super) {

      __extends(Map, _super);

      Map.name = 'Map';

      function Map() {
        return Map.__super__.constructor.apply(this, arguments);
      }

      /*
          A generic map view.
      */


      Map.prototype.initialize = function(_arg1) {
        var MapModule,
          _this = this;
        MapModule = _arg1.MapModule;
        /*
              MapModule should be an module implementing a map wrapper, such as maps/ol
        */

        this.map = MapModule.createMap(this.el);
        return this.map.onMoved(function(bounds) {
          return _this.trigger('change', boundsToPolygon(bounds));
        });
      };

      Map.prototype.getValue = function() {
        return boundsToPolygon(enlargeBounds(this.map.getBounds()));
      };

      Map.prototype.setValue = function(polygon) {
        return this.map.setBounds(polygonToBounds(polygon));
      };

      return Map;

    })(Backbone.View);
  });

}).call(this);
