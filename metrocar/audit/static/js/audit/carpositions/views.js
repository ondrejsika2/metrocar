// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['module', 'backbone', 'maps/ol', 'common/views/map', 'common/views/select'], function(module, Backbone, OLMap, MapView, Select) {
    var App, Map, config;
    config = module.config();
    Map = (function(_super) {

      __extends(Map, _super);

      Map.name = 'Map';

      function Map() {
        return Map.__super__.constructor.apply(this, arguments);
      }

      Map.prototype.display = function(data) {
        var cars, location, _i, _len, _ref, _results;
        this.map.clear();
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          _ref = data[_i], location = _ref.location, cars = _ref.cars;
          _results.push(this.map.drawIconMarker({
            location: location,
            content: cars,
            icon: "" + config.staticUrl + "img/icons/car.png",
            size: [32, 32],
            offset: [-16, -16]
          }));
        }
        return _results;
      };

      Map.prototype.focus = function(data, zoom) {
        return this.map.focus(data.map(function(x) {
          return x.location;
        }), zoom);
      };

      return Map;

    })(MapView);
    App = (function(_super) {

      __extends(App, _super);

      App.name = 'App';

      function App() {
        return App.__super__.constructor.apply(this, arguments);
      }

      App.prototype.initialize = function() {
        var _this = this;
        this.map = new Map({
          el: this.$('.map'),
          MapModule: OLMap
        });
        this.map.on('change', function() {
          console.log('map change occured');
          return _this.update();
        });
        this.showAll();
        this.carSelect = new Select({
          el: this.$('.car-select')
        });
        return this.carSelect.on('change', function(carId) {
          return _this.query({
            car_id: carId
          }, function(response) {
            return _this.map.focus(response, 12);
          });
        });
      };

      App.prototype.update = function() {
        var data,
          _this = this;
        data = {
          in_polygon: this.map.getValue()
        };
        return this.query(data, function(response) {
          return _this.map.display(response);
        });
      };

      App.prototype.query = function(data, callback) {
        return $.post(config.dataUrl, JSON.stringify(data), callback);
      };

      App.prototype.showAll = function() {
        var _this = this;
        return this.query({}, function(response) {
          return _this.map.focus(response);
        });
      };

      return App;

    })(Backbone.View);
    return {
      App: App
    };
  });

}).call(this);
