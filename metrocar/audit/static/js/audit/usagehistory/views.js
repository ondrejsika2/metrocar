// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  define(['module', 'underscore', 'backbone', 'jquery', 'moment', 'maps/ol', 'maps/utils', 'audit/usagehistory/router', 'jquery-ui'], function(module, _, Backbone, $, moment, OLMap, utils, Router) {
    var App, Calendar, Map, UnitSelect, boundsToPolygon, config, decodeQuery, encodeQuery, enlargeBounds, marker, polygonToBounds;
    config = module.config();
    boundsToPolygon = utils.boundsToPolygon, polygonToBounds = utils.polygonToBounds;
    encodeQuery = function(object) {
      return encodeURIComponent(JSON.stringify(object));
    };
    decodeQuery = function(string) {
      return JSON.parse(decodeURIComponent(string));
    };
    enlargeBounds = function(_arg) {
      var bottom, left, right, top;
      left = _arg.left, right = _arg.right, top = _arg.top, bottom = _arg.bottom;
      return {
        left: left - 0.01,
        right: right + 0.01,
        top: top + 0.01,
        bottom: bottom - 0.01
      };
    };
    UnitSelect = (function(_super) {

      __extends(UnitSelect, _super);

      UnitSelect.name = 'UnitSelect';

      function UnitSelect() {
        return UnitSelect.__super__.constructor.apply(this, arguments);
      }

      UnitSelect.prototype.events = {
        'change select': 'changed'
      };

      UnitSelect.prototype.changed = function() {
        return this.trigger('change', this.getValue());
      };

      UnitSelect.prototype.getValue = function() {
        var val;
        if (val = this.$('select').val()) {
          return [val];
        } else {
          return null;
        }
      };

      UnitSelect.prototype.setValue = function(value) {
        this.$('select').val(value);
        return this.changed();
      };

      return UnitSelect;

    })(Backbone.View);
    Calendar = (function(_super) {

      __extends(Calendar, _super);

      Calendar.name = 'Calendar';

      function Calendar() {
        return Calendar.__super__.constructor.apply(this, arguments);
      }

      Calendar.prototype.events = {
        'change input': 'changed'
      };

      Calendar.prototype.initialize = function() {
        this.input = this.$('input');
        return console.log(this.input);
      };

      Calendar.prototype.changed = function() {
        return this.trigger('change');
      };

      Calendar.prototype.getValue = function() {
        return this.input.val();
      };

      Calendar.prototype.setValue = function() {};

      return Calendar;

    })(Backbone.View);
    marker = function(data) {
      var entry, exclude, k, rows, tables, v;
      exclude = ['unit_id'];
      tables = (function() {
        var _i, _len, _ref, _results;
        _ref = data.entries;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entry = _ref[_i];
          rows = ((function() {
            var _results1;
            _results1 = [];
            for (k in entry) {
              v = entry[k];
              if (v && __indexOf.call(exclude, k) < 0) {
                _results1.push("<tr><th>" + k + "</th><td>" + v + "</td></tr>");
              }
            }
            return _results1;
          })()).join('\n');
          _results.push("<table><tbody>" + rows + "</tbody></table>");
        }
        return _results;
      })();
      return {
        location: data.location,
        content: tables.join('<br>')
      };
    };
    Map = (function(_super) {

      __extends(Map, _super);

      Map.name = 'Map';

      function Map() {
        return Map.__super__.constructor.apply(this, arguments);
      }

      Map.prototype.initialize = function() {
        var _this = this;
        this.map = OLMap(this.el);
        return this.map.onMoved(function(bounds) {
          return _this.trigger('change', boundsToPolygon(bounds));
        });
      };

      Map.prototype.getValue = function() {
        return boundsToPolygon(enlargeBounds(this.map.getBounds()));
      };

      Map.prototype.setValue = function(polygon) {
        return this.map.setBounds(polygonToBounds(polygon));
      };

      Map.prototype.display = function(data) {
        var route, _i, _len, _results;
        this.map.clear();
        if (data) {
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            route = data[_i];
            console.log({
              'route': route
            });
            this.map.drawRoute(route.entries.map(function(x) {
              return x.location;
            }));
            _results.push(this.map.drawMarkers(route.entries.map(marker)));
          }
          return _results;
        }
      };

      return Map;

    })(Backbone.View);
    return {
      App: App = (function(_super) {

        __extends(App, _super);

        App.name = 'App';

        function App() {
          return App.__super__.constructor.apply(this, arguments);
        }

        App.prototype.initialize = function() {
          var name, widget, _fn, _ref,
            _this = this;
          this.map = new Map({
            el: this.$('.map')
          });
          this.controls = {
            units: new UnitSelect({
              el: this.$('.unit-select')
            }),
            start: new Calendar({
              el: this.$('.start-cal')
            }),
            end: new Calendar({
              el: this.$('.end-cal')
            }),
            in_polygon: this.map
          };
          this.setupRouter();
          _ref = this.controls;
          _fn = function(name, widget) {
            return widget.on('change', function() {
              return _this.processCurrentSettings();
            });
          };
          for (name in _ref) {
            widget = _ref[name];
            _fn(name, widget);
          }
          this.processCurrentSettings();
          this.requestId = 0;
          return this.latestResponse = 0;
        };

        App.prototype.processCurrentSettings = function() {
          var query;
          query = this.constructQuery();
          if (query.units) {
            this.router.navigate("q/" + (encodeQuery(query)), {
              replace: true
            });
            return this.queryServer(_.extend(query, {
              request_id: this.requestId += 1
            }));
          }
        };

        App.prototype.constructQuery = function() {
          var name, q, widget, _ref;
          q = {};
          _ref = this.controls;
          for (name in _ref) {
            widget = _ref[name];
            q[name] = widget.getValue();
          }
          return q;
        };

        App.prototype.queryServer = function(query) {
          var _this = this;
          return $.ajax({
            url: config.queryUrl,
            type: 'POST',
            data: JSON.stringify(query),
            success: function(response) {
              if (response.request_id > _this.latestResponse) {
                _this.latestResponse = response.request_id;
                return _this.display(response);
              }
            },
            error: function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return console.log.apply(console, ['AJAX error'].concat(__slice.call(args)));
            }
          });
        };

        App.prototype.display = function(response) {
          console.log('display', response);
          return this.map.display(response.results);
        };

        App.prototype.setupRouter = function() {
          var _this = this;
          this.router = new Router;
          this.router.on('route:query', function(querystring) {
            var name, q, val, _results;
            q = decodeQuery(querystring);
            _results = [];
            for (name in q) {
              val = q[name];
              if (val) {
                _results.push(_this.controls[name].setValue(val));
              }
            }
            return _results;
          });
          return Backbone.history.start({
            pushState: true,
            root: config.rootUrl
          });
        };

        return App;

      })(Backbone.View)
    };
  });

}).call(this);
